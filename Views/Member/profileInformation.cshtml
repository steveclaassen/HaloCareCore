<!--ViewMember-->

@model HaloCareCore.Models.EnrolmentViewModel


@{
    ViewBag.Title = "profileInformation";
    Layout = "~/Views/Shared/_LayoutMember.cshtml";
}


<style>
    .container_memberView {
        max-width: 1500px;
        width: 1400px;
        margin-left: 0%;
    }

    .editButton:hover {
        filter: drop-shadow(3px 3px 3px rgba(34, 34, 40, 0.50));
    }
</style>


<link href="~/Content/css/select2.min.css" rel="stylesheet" />
<!--profilePicture-->
@Html.HiddenFor(model => model.hasSteps)

<div class="profileImage">

    @if (Model.dependent.sex == "M" && (DateTime.Now.Year - Model.dependent.birthDate.Year > 13))
    {
        <a class="editButton" href="@Url.Action("EditMember", "Member", new { DependentID = Model.dependent.DependantID }, null)" title="Edit Patient">
            <img src="~/Content/Images/memberProfile/Page Icons/memberView_Profile.png" />
        </a>
    }

    else if (Model.dependent.sex == "F" && (DateTime.Now.Year - Model.dependent.birthDate.Year > 13))
    {
        <a class="editButton" href="@Url.Action("EditMember", "Member", new { DependentID = Model.dependent.DependantID }, null)" title="Edit Patient">
            <img src="~/Content/Images/memberProfile/Page Icons/memberView_ProfileAF.png" />
        </a>
    }

    else if (Model.dependent.sex == "M" && (DateTime.Now.Year - Model.dependent.birthDate.Year < 13))
    {
        <a class="editButton" href="@Url.Action("EditMember", "Member", new { DependentID = Model.dependent.DependantID }, null)" title="Edit Patient">
            <img src="~/Content/Images/memberProfile/Page Icons/memberView_ProfileIM.png" />
        </a>
    }

    else if (Model.dependent.sex == "F" && (DateTime.Now.Year - Model.dependent.birthDate.Year < 13))
    {
        <a class="editButton" href="@Url.Action("EditMember", "Member", new { DependentID = Model.dependent.DependantID }, null)" title="Edit Patient">
            <img src="~/Content/Images/memberProfile/Page Icons/memberView_ProfileIF.png" />
        </a>
    }

    else
    {
        <a class="editButton" href="@Url.Action("EditMember", "Member", new { DependentID = Model.dependent.DependantID }, null)" title="Edit Patient">
            <img src="~/Content/Images/memberProfile/Page Icons/memberView_Profile.png" />
        </a>
    }

</div>


<div class="container_memberView">

    <!--profilePicture-->

    <div class="col-md-12" style="margin-top: -8%; font-size: 11px; z-index: 5">

        <div class="memberInformation">
            <div class="row memberInformation_fullName">

                @Html.DisplayFor(model => model.dependent.firstName)
                @Html.DisplayFor(model => model.dependent.lastName),
                @Html.DisplayFor(model => model.dependent.initials)
            </div>
            <hr class="dashBoard_Ruler" style="margin-left: 1%; width: 1250px!important; margin-top: 0.5%">
            <div class="row col-md-9">
                <div class="col-md-3">
                    <div class="memberInformation_membershipNumber">
                        @Html.Label(null,"Membership No: ", htmlAttributes: new { @class = "control-label-member_view" })
                        @Html.DisplayFor(model => model.member.membershipNo)
                    </div>
                    <div class="memberInformation_IDNumber">
                        @Html.Label(null,"ID No: ", htmlAttributes: new { @class = "control-label-member_view" })
                        @Html.DisplayFor(model => model.dependent.idNumber)
                    </div>
                    <div class="memberInformation_IDNumber">
                        @Html.Label(null,"Status: ", htmlAttributes: new { @class = "control-label-member_view" })
                        <b style="color: darkred; font-size: 10px">Active HAART / Active Oncology</b>
                    </div>

                </div>
                <div class="col-md-2" style="width: 250px!important">
                    <div class="memberInformation_dependantCode">
                        @Html.Label(null,"Dependant Code: ", htmlAttributes: new { @class = "control-label-member_view" })
                        @Html.DisplayFor(model => model.dependent.dependentCode)
                    </div>
                    <div class="memberInformation_dependantCode">
                        @Html.Label(null,"Program: ", htmlAttributes: new { @class = "control-label-member_view" })
                        Diabetes / HIV
                    </div>
                    <!--                    <div class="memberInformation_upDateInfo" style="z-index: 5">
                                            @Html.RenderActionLink("Update Patient Details", "EditMember", "Member", new { DependentID = Model.dependent.DependantID }, null)
                                        </div>
                    -->
                </div>

                <div class="col-md-3">
                    <div class="memberInformation_dependantCode">
                        @Html.Label(null,"Medical scheme: ", htmlAttributes: new { @class = "control-label-member_view" })
                        testMedicalAid
                    </div>
                    <div class="memberInformation_dependantCode">
                        @Html.Label(null,"Option: ", htmlAttributes: new { @class = "control-label-member_view" })
                        testOption
                    </div>
                    <div class="memberInformation_dependantCode">
                        @Html.Label(null,"Employer Group: ", htmlAttributes: new { @class = "control-label-member_view" })
                        testEmployerGroup
                    </div>
                </div>

                <div class="col-md-3">
                    <div class="memberInformation_dependantCode">
                        @Html.Label(null,"Doctor: ", htmlAttributes: new { @class = "control-label-member_view" })
                        testDoctor(0143657)
                    </div>
                    <div class="memberInformation_dependantCode">
                        @Html.Label(null,"Case Manager: ", htmlAttributes: new { @class = "control-label-member_view" })
                        testCaseManager
                    </div>
                    <div class="memberInformation_dependantCode">
                        @Html.Label(null,"Pharmacy: ", htmlAttributes: new { @class = "control-label-member_view" })
                        testPharmacy
                    </div>
                </div>
            </div>

            <div class="col-md-2">
                <div class="memberInformation_specialNote">
                    @Html.Label(null,"Special Note: ", htmlAttributes: new { @class = "control-label-member_view" })
                </div>
                <div class="memberInformation_specialNote">
                    @Html.DisplayFor(model => model.Notes.note)
                </div>
                <div class="memberInformation_specialNoteAdd">
                    @Html.RenderActionLink("Edit", "EditNote", new { DependentID = Model.dependent.DependantID }, null)
                </div>
                <div class="blank">&nbsp;</div>
            </div>

            <hr class="dashBoard_Ruler" style="margin-left: 1%; width: 1250px!important; margin-top: 2%">

        </div>
    </div>
</div>



@section Scripts {
    <script src="https://code.jquery.com/jquery-1.12.4.js"></script>

    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>

    <script src="~/bundles/jqueryval"></script>
    <script src="~/Scripts/select2.min.js"></script>


    <script type="text/javascript">



        $(function () {
            $("#datepicker").datepicker({
                numberOfMonths: 3,
                showButtonPanel: true
            });
        });
        $(function () {
            $("#tabs").tabs({
                beforeLoad: function (event, ui) {
                    ui.jqXHR.fail(function () {
                        ui.panel.html(
                            "Couldn't load this tab. We'll try to fix this as soon as possible. " +
                            "tabs load fine");
                    });
                }
            });
        });
        $(function () {
            $("#tabs2").tabs({
                beforeLoad: function (event, ui) {
                    ui.jqXHR.fail(function () {
                        ui.panel.html(
                            "Couldn't load this tab. We'll try to fix this as soon as possible. " +
                            "tabs load fine");
                    });
                }
            });
        });
        $(function () {
            $("#tabs3").tabs({
                beforeLoad: function (event, ui) {
                    ui.jqXHR.fail(function () {
                        ui.panel.html(
                            "Couldn't load this tab. We'll try to fix this as soon as possible. " +
                            "tabs load fine");
                    });
                }
            });
        });
        $(function () {
            $("#tabs4").tabs({
                beforeLoad: function (event, ui) {
                    ui.jqXHR.fail(function () {
                        ui.panel.html(
                            "Couldn't load this tab. We'll try to fix this as soon as possible. " +
                            "tabs load fine");
                    });
                }
            });
        });
        $(function () {
            $("#tab").tabs({
                beforeLoad: function (event, ui) {
                    ui.jqXHR.fail(function () {
                        ui.panel.html(
                            "Couldn't load this tab. We'll try to fix this as soon as possible. " +
                            "tabs load fine");
                    });
                }
            });
        });
        $(function () {
            $("#tabs6").tabs({
                beforeLoad: function (event, ui) {
                    ui.jqXHR.fail(function () {
                        ui.panel.html(
                            "Couldn't load this tab. We'll try to fix this as soon as possible. " +
                            "tabs load fine");
                    });
                }
            });
        });

        $(document).ready(function () {
            event.preventDefault();
            jQuery.noConflict();
            if ($('#hasSteps').val() == 'True') {
                $('#statusModal').modal('show');
            }
            $('select[name="templates"]').change(function () {
                $("#smsMessages_message").val($('select[name="templates"] option:selected').text());
            }
            );
        });

        function FillType() {
            var stateId = $('#EnquiryType').val();
            $.ajax({
                url: '/Member/FillType',
                type: "GET",
                dataType: "JSON",
                data: { queryType: stateId },
                success: function (options) {
                    $("#QueryT").html(""); // clear before appending new list
                    $.each(options, function (i, option) {
                        $("#QueryT").append(
                            $('<option></option>').val(option.enquiryType).html(option.enquiryName));
                    });
                }
            });
        }

        var $rows = $('#table tr');
        $('#search').keyup(function () {
            var val = $.trim($(this).val()).replace(/ +/g, ' ').toLowerCase();

            $rows.show().filter(function () {
                var text = $(this).text().replace(/\s+/g, ' ').toLowerCase();
                return !~text.indexOf(val);
            }).hide();
        });

        $(function () {
            $('.go_back').click(function (e) {
                e.preventDefault();
                history.go(-1);
            });
        });

        $('#zoomBtn').click(function () {
            $('.zoom-btn-sm').toggleClass('scale-out');
            if (!$('.zoom-card').hasClass('scale-out')) {
                $('.zoom-card').toggleClass('scale-out');
            }
        });

        $('.zoom-btn-sm').click(function () {
            var btn = $(this);
            var card = $('.zoom-card');
            if ($('.zoom-card').hasClass('scale-out')) {
                $('.zoom-card').toggleClass('scale-out');
            }
            if (btn.hasClass('zoom-btn-person')) {
                card.css('background-color', '#d32f2f');
            } else if (btn.hasClass('zoom-btn-doc')) {
                card.css('background-color', '#fbc02d');
            } else if (btn.hasClass('zoom-btn-tangram')) {
                card.css('background-color', '#388e3c');
            } else if (btn.hasClass('zoom-btn-report')) {
                card.css('background-color', '#1976d2');
            } else {
                card.css('background-color', '#7b1fa2');
            }
        });

    </script>
}
