@model HaloCareCore.Models.ClinicalHistoryViewModel
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor HttpContextAccessor
@{
    ViewBag.Title = "AddMedication";
    Layout = "~/Views/Shared/_LayoutNavigation.cshtml";
}
<comment>
    <!--
        06 August 2019 -- HCare-758(Generel - Redirect to tab functionality)
        Using jquery to add localStorage in order to redirect to the last tab that the user was on and a Submit/Save Button clicked. This will take you back to the origin tab.

    -->
</comment>
<style>
    body {
        background-color: #f9f9fc !important;
    }

    .select2-container--default .select2-selection--single {
        width: 400px !important;
        margin-left: 3% !important;
        border: 1px solid transparent !important;
    }

        .select2-container--default .select2-selection--single .select2-selection__placeholder {
            color: white !important;
        }
</style>

<div class="fullPanel_Container">
    <div class="profilePanel_pathology">
        <!--breadCrumbs-->
        <ul class="breadcrumbs" style="margin-top: -1%; margin-bottom: 2%; margin-left: -1%">
            <li style="font-size: 12px; color: #0081b3; font-weight: 200">You are here:</li>
            <li><a href="@Url.Action("Index", "Home", new {})">Home</a></li>
            <li><a href="@Url.Action("OpenAssignments", "Clinical", new {})">Overview</a></li>
            <li><a href="#">Patient Summary</a></li>
        </ul>

        <!--navCollection-->
        <div class="navButtons">
            @Html.Partial("_navCollection")
        </div>

        <!--profileInformation-->
        <div>
            @Html.Action("_profileBar_edit", "Member", new { DependentID = Context.Request.Query["DependentID"], pro = Context.Request.Query["pro"] })
        </div>
    </div>

    <!--pageHeader-->
    <nav id="global-nav" class="nav">
        <div class="pull-left title">
            <h1 class="site-title_patientProfile">
                <span><i class="fas fa-user-circle"></i>&emsp; Patient summary</span>
            </h1>
        </div>
        <div class="pull-right title">
            <h1 class="site-title_userID pull-right">
                <div class="halocareLogo"><img src="~/Content/Images/Navigation/navBarIcons/haloCare_White.png" /></div>
            </h1>
            <h1 class="site-title_userID pull-right">
                @if (HttpContextAccessor.HttpContext.Session.GetString("Init") != null)
                {
                    <span href="#" id="userMenu-toggle"><span class="initials_Avatar" style="color: white!important; font-size: 16px">@@HttpContextAccessor.HttpContext.Session.GetString("Init").ToString() </span></span>
                }
            </h1>
            <h1 class="site-waffleIcon pull-right">
                <span href="#" id="patientMenu-toggle"><span class="waffleIcon" style="color: white!important; font-size: 12px"><i class="fas fa-th"></i></span></span>
            </h1>
        </div>
    </nav>

    <div style="margin-bottom:2%"></div>

    <div class="row assignmentOverview_container">

        <h4 class="summaryHeading">Medication history</h4>
        <hr class="fancyruler">
        <br />
        <br />

        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(model => model.medication.dependantId)

            <div class="form-horizontal editForm">

                <div class="form-group">
                    <div class="col-md-12">

                        <div class="col-md-6">
                            @Html.Label(null,"Product", htmlAttributes: new { @class = "control-label col-md-2 " })
                            <div class="col-md-10">
                                @*@Html.DropDownList("Product", null, "- Select -", htmlAttributes: new { @class = "infoBox_editMember" })*@
                                @Html.TextBoxFor(model => model.medication.productName, htmlAttributes: new { @class = "infoBox_editMember" })
                                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="col-md-6">
                            @Html.LabelFor(model => model.medication.startDate, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.medication.startDate, new { htmlAttributes = new { @class = "infoBox_editMember dateLimit" } })
                                @Html.ValidationMessageFor(model => model.medication.startDate, "", new { @class = "text-danger" })
                            </div>
                        </div>

                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-12">
                        <div class="col-md-6">
                            @Html.Label(null,"Instructions", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.medication.directions, new { htmlAttributes = new { @class = "infoBox_editMember" } })
                                @Html.ValidationMessageFor(model => model.medication.directions, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="col-md-6">
                            @Html.LabelFor(model => model.medication.endDate, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.medication.endDate, new { htmlAttributes = new { @class = "infoBox_editMember dateLimit" } })
                                @Html.ValidationMessageFor(model => model.medication.endDate, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-12">
                        <div class="col-md-6">
                            @Html.LabelFor(model => model.medication.comment, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.medication.comment, new { htmlAttributes = new { @class = "infoBox_editMember" } })
                                @Html.ValidationMessageFor(model => model.medication.comment, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="col-md-6">
                                @Html.LabelFor(model => model.medication.programType, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    <div>
                                        @Html.DropDownList("programType", null, "- Select -", new { @class = "infoBox_editMember", @id = "programDescription", @style = "width: 400px" })
                                        @Html.ValidationMessageFor(model => model.medication.programType, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                        </div>

                    </div>
                </div>
                <br />
                <div class="form-group">
                    <div class="actionButton" style="margin-left: 43.5%; margin-bottom: -1.5%">
                        <input type="submit" value="Add Medication" class="btn buttonRound_formCreate" style="width: 20%!important" />
                    </div>
                </div>
            </div>
        }
        <br />
        <br />
        <div class="col-md-12">
            <div class="row">
                <table class="table indexTable_assignments" id="medTable">
                    <tr>
                        <th>
                            @Html.DisplayNameFor(model => model.medication.createdDate)
                        </th>
                        <th onclick="medTable(1)">
                            @Html.DisplayNameFor(model => model.medication.nappiCode) <i class="fa fa-fw fa-sort"></i>
                        </th>
                        <th onclick="medTable(2)">
                            @Html.DisplayNameFor(model => model.medication.productName) <i class="fa fa-fw fa-sort"></i>
                        </th>
                        <th onclick="medTable(3)">
                            @Html.DisplayNameFor(model => model.medication.directions) <i class="fa fa-fw fa-sort"></i>
                        </th>
                        <th onclick="medTable(4)">
                            @Html.DisplayNameFor(model => model.medication.createdBy) <i class="fa fa-fw fa-sort"></i>
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.medication.startDate)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.medication.endDate)
                        </th>


                    </tr>
                    @if (Model.medications.Count() == 0)
                    {
                        <tr><td colspan="7" style="text-align: center!important">No records available</td></tr>
                    }
                    else
                    {
                        foreach (var item in Model.medications)
                        {
                            <tr>
                                <td>
                                    @Html.DisplayFor(modelItem => item.createdDate)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.nappiCode)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.productName)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.directions)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.createdBy)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.startDate)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.endDate)
                                </td>


                            </tr>
                        }
                    }
                </table>
            </div>
        </div>
        <br />
        <br />

        <div class="form-group">
            <div class="actionButton" style="margin-left: 39%">
                <a href="@Url.Action("patientClinical", "Member", new { DependentID = Context.Request.Query["DependentID"]})" class="btn buttonRound_formBack" style="width: 15%!important; position: relative; margin-left: 1%!important">Back</a>
                <input type="button" class="btn buttonRound_formCreate" style="width: 15%" value="Done" onclick="location.href='@Url.Action("patientClinical", "Member", new { DependentID = Model.medication.dependantId }, null)'" />

            </div>
        </div>
        <br />
    </div>
</div>

<script src="js/jquery.tablesorter.min.js"></script>



@section scripts{
    <script src="~/Scripts/layout-buttons-general.js"></script>

    <link rel="stylesheet" href="//code.jquery.com/ui/1.11.4/themes/start/jquery-ui.css">
    <script src="//code.jquery.com/jquery-1.10.2.js"></script>
    <script src="//code.jquery.com/ui/1.11.4/jquery-ui.js"></script>

    <!--Product AutoComplete-->
    <script type="text/javascript">
        $(document).ready(function () {
            $("#medication_productName").autocomplete({
                source: function (request, response) {
                    $.ajax({
                        url: "/Member/GetProducts",
                        type: "POST",
                        dataType: "json",
                        data: { Prefix: request.term },
                        success: function (data) {
                            response($.map(data, function (item) {
                                return { label: item.productName, value: item.productName };
                            }))

                        }
                    })
                },
                messages: {
                    noResults: "",
                    results: function (count) {
                        return count + (count > 1 ? ' results' : ' result ') + ' found';
                    }
                }
            });
        })
    </script>
    <!--General-->
    <script>
        /*tableSearch*/
        var $rows = $('#medTable tr');
        $('#search').keyup(function () {
            var val = $.trim($(this).val()).replace(/ +/g, ' ').toLowerCase();

            $rows.show().filter(function () {
                var text = $(this).text().replace(/\s+/g, ' ').toLowerCase();
                return !~text.indexOf(val);
            }).hide();
        });

        /*tableSort*/
        function medTable(n) {
            var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
            table = document.getElementById("medTable");
            switching = true;
            dir = "asc";

            while (switching) {
                switching = false;
                rows = table.getElementsByTagName("TR");

                for (i = 1; i < (rows.length - 1); i++) {

                    shouldSwitch = false;

                    x = rows[i].getElementsByTagName("TD")[n];
                    y = rows[i + 1].getElementsByTagName("TD")[n];

                    if (dir == "asc") {
                        if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
                            //if so, mark as a switch and break the loop:
                            shouldSwitch = true;
                            break;
                        }
                    } else if (dir == "desc") {
                        if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
                            //if so, mark as a switch and break the loop:
                            shouldSwitch = true;
                            break;
                        }
                    }
                }
                if (shouldSwitch) {
                    /*If a switch has been marked, make the switch
                    and mark that a switch has been done:*/
                    rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                    switching = true;
                    //Each time a switch is done, increase this count by 1:
                    switchcount++;
                } else {
                    /*If no switching has been done AND the direction is "asc",
                    set the direction to "desc" and run the while loop again.*/
                    if (switchcount == 0 && dir == "asc") {
                        dir = "desc";
                        switching = true;
                    }
                }
            }
        }

        $(document).ready(function () {
            $('#table').DataTable({
                columnDefs: [{
                    targets: [0],
                    orderData: [0, 1]
                }, {
                    targets: [1],
                    orderData: [1, 0]
                }, {
                    targets: [4],
                    orderData: [4, 0]
                }]
            });
        });

    </script>
    <!--Select dropdowns-->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.6-rc.0/css/select2.min.css" rel="stylesheet" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.6-rc.0/js/select2.min.js"></script>
    <script>
        $(document).ready(function () { $("#programType").select2({ multiple: false, placeholder: "- Select -", allowClear: true }); });
    </script>
    <!--DateLimit-->
    <script>
        var dateControler = {
            currentDate: null
        }

        $(document).on("change", ".dateLimit", function (event, ui) {
            var now = new Date();
            var selectedDate = new Date($(this).val());

            if (selectedDate > now) {
                $(this).val(dateControler.currentDate)
            } else {
                dateControler.currentDate = $(this).val();
            }
        });

    </script>
}



