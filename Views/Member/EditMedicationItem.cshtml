@model HaloCareCore.Models.Script.ScriptItems
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor HttpContextAccessor
@{
    ViewBag.Title = "EditMedicationItem";
    Layout = "~/Views/Shared/_LayoutNavigation.cshtml";
}

<comment>
    <!--
        25 November 2019 -- HCare-892(Inactivate medication entry from Patient history)
        Added edit button to Medication entry on patient clinical tab which allows the user to update the Note, Comment and active status.
        Added a new view to allow the user to view the details of the medication item entry.
    -->
</comment>
<style>
    body {
        background-color: #f9f9fc !important;
    }
</style>

<div class="fullScreen_container zero-padding">

    <!--pageHeader-->
    <nav id="global-nav" class="nav">
        <div class="pull-left title">
            <h1 class="site-title_patientProfile">
                <span><i class="fas fa-prescription"></i>&emsp; Script item</span>
            </h1>
        </div>
        <div class="pull-right title">
            <h1 class="site-title_userID pull-right">
                <div class="halocareLogo"><img src="~/Content/Images/Navigation/navBarIcons/haloCare_White.png" /></div>
            </h1>
            <h1 class="site-title_userID pull-right">
                @if (HttpContextAccessor.HttpContext.Session.GetString("Init") != null)
                {
                    <span href="#" id="userMenu-toggle"><span class="initials_Avatar" style="color: white!important; font-size: 16px">@HttpContextAccessor.HttpContext.Session.GetString("Init").ToString() </span></span>
                }
            </h1>
            <h1 class="site-waffleIcon pull-right">
                <span href="#" id="patientMenu-toggle"><span class="waffleIcon" style="color: white!important; font-size: 12px"><i class="fas fa-th"></i></span></span>
            </h1>
        </div>
    </nav>

    <!--breadCrumbs-->
    <ul class="breadcrumbs_fullScreens">
        <li style="font-size: 12px; color: #0081b3; font-weight: 200">You are here:</li>
        <li><a href="@Url.Action("Index", "Home", new {})">Home</a></li>
        <li><a href="@Url.Action("Details", "Scripts", new {ID = Model.scriptID})">Script</a></li>
        <li><a href="#">Edit</a></li>
    </ul>

    <!--navCollection-->
    <div class="navCollection_fullScreens">
        @Html.Partial("_navCollection")
    </div>

    <div style="margin-bottom: 2%"></div>

    <div class="row">
        <div class="form-horizontal editForm">
            <h4 class="tableHeading">Medication item</h4>
            <hr class="fancyruler">
            <br />

            @using (Html.BeginForm())
            {
                @Html.AntiForgeryToken()

                <div class="form-horizontal editForm">
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    @Html.HiddenFor(model => model.scriptID)
                    @Html.HiddenFor(model => model.itemNo)
                    @Html.HiddenFor(model => model.quantity)
                    @Html.HiddenFor(model => model.itemRepeats)
                    @Html.HiddenFor(model => model.icd10code)
                    @Html.HiddenFor(model => model.nappiCode)
                    @Html.HiddenFor(model => model.fromDate)
                    @Html.HiddenFor(model => model.toDate)
                    @Html.Hidden("depId")

                    <div class="form-group">
                        @Html.Label(null, "ICD-10", htmlAttributes: new { @class = "control-label col-md-2 drop" }) @*HCare-958*@
                        <div class="col-md-10 property-item">
                            @Html.Display("icd10")
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.Label(null, "NAPPI", htmlAttributes: new { @class = "control-label col-md-2 drop" })
                        <div class="col-md-10 property-item">
                            @Html.Display("nappi")
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.Label(null, "Medication item", htmlAttributes: new { @class = "control-label col-md-2 drop" })
                        <div class="col-md-10 property-item">
                            @Html.Display("ItemName")
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.Label(null, "From date", htmlAttributes: new { @class = "control-label col-md-2 drop" })
                        <div class="col-md-10 property-item">
                            @Html.Display("fromDate")
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.Label(null, "To date", htmlAttributes: new { @class = "control-label col-md-2 drop" })
                        <div class="col-md-10 property-item">
                            @Html.Display("toDate")
                        </div>
                    </div>
                    <br />
                    <div class="form-group">
                        @Html.Label(null, "Note", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.directions, new { htmlAttributes = new { @class = "textbox-control ", @placeholder = "Type here ...", autocomplete = "off" } })
                            @Html.ValidationMessageFor(model => model.directions, "", new { @class = "text-danger", @style = "font-size: 75%;margin-left: 2%", @id = "note" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.Label(null, "Comment", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.comment, new { htmlAttributes = new { @class = "textbox-control ", @placeholder = "Type here ...", autocomplete = "off" } })
                            @Html.ValidationMessageFor(model => model.comment, "", new { @class = "text-danger", @style = "font-size: 75%;margin-left: 2%", @id = "comment" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.active, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            <div class="checkbox active-check">
                                @Html.EditorFor(model => model.active)
                                @Html.ValidationMessageFor(model => model.active, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="fixedBack" style="margin-left: 40%">
                        <input value="Back" class="btn buttonRound_formBack go_back" onclick="backKey()" style="width: 15%!important" />
                        <input type="submit" value="Save" class="btn buttonRound_formCreate patientClinical" onclick="storageKey()" style="width: 15%!important" />
                    </div>

                </div>
            }
        </div>
    </div>
</div>

@section scripts{
    <script src="~/Scripts/layout-buttons-general.js"></script>

    <!-- local-storage-redirect -->
    <script>
        function backKey() {
            if (localStorage.key(0) == "edit_medication") {
                localStorage.clear();
                localStorage.removeItem("edit_medication");
                localStorage.setItem("back_medication", Date.now());
            }
            if (localStorage.key(0) == "edit_diabetes_medication") {
                localStorage.clear();
                localStorage.removeItem("edit_diabetes_medication");
                localStorage.setItem("back_diabetes_medication", Date.now());
            }
            if (localStorage.key(0) == "edit_hiv_medication") {
                localStorage.clear();
                localStorage.removeItem("edit_hiv_medication");
                localStorage.setItem("back_hiv_medication", Date.now());
            }
        }

        function storageKey() {
            if (localStorage.key(0) == "edit_medication") {
                localStorage.clear();
                localStorage.removeItem("edit_medication");
                localStorage.setItem("edit_medication", Date.now());
            }
            if (localStorage.key(0) == "edit_diabetes_medication") {
                localStorage.clear();
                localStorage.removeItem("edit_diabetes_medication");
                localStorage.setItem("edit_diabetes_medication", Date.now());
            }
            if (localStorage.key(0) == "edit_hiv_medication") {
                localStorage.clear();
                localStorage.removeItem("edit_hiv_medication");
                localStorage.setItem("edit_hiv_medication", Date.now());
            }
        }

    </script>

    <script src="js/jquery.tablesorter.min.js"></script>
    <script src="//code.jquery.com/jquery-1.10.2.js"></script>
    <link rel="stylesheet" href="//code.jquery.com/ui/1.11.4/themes/start/jquery-ui.css">
    <script src="//code.jquery.com/ui/1.11.4/jquery-ui.js"></script>

    <!-- product-auto-complete -->
    <script type="text/javascript">
        $(document).ready(function () {
            $("#medication_productName").autocomplete({
                source: function (request, response) {
                    $.ajax({
                        url: "/Member/GetProducts",
                        type: "POST",
                        dataType: "json",
                        data: { Prefix: request.term },
                        success: function (data) {
                            response($.map(data, function (item) {
                                return { label: item.productName, value: item.productName };
                            }))

                        }
                    })
                },
                messages: {
                    noResults: "",
                    results: function (count) {
                        return count + (count > 1 ? ' results' : ' result ') + ' found';
                    }
                }
            });
        })
    </script>

}




